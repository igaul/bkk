import { defineConfig } from "orval";
/** !!! must match reservation/API_VERSION */
const API_VERSION = "v1";
export default defineConfig({
  // reszeit: {
  //   input: {
  //     target: "./app/oai/reszeit.json",
  //   },
  //   output: {
  //     target: "./app/oai/reszeit.api.ts",
  //     schemas: "./app/oai/reszeit/models",
  //     // client: "react-query",
  //     // mock: true,
  //     override: {
  //       mutator: {
  //         path: "./apps/oai/fetcher.ts",
  //         name: "fetcherInstance",
  //       },
  //     },
  //   },
  // },
  reszeitAdmin: {
    input: {
      // target: "./app/oai/reszeitAdmin.json",
      target: `./openapi.${API_VERSION}.json`,
      filters: {
        // create just admin or guest spec
        // TODO make two entries in orval.config.js to gen separate specs
        // tags:['common-api','admin-api']
      },
    },
    output: {
      target: "./apps/oai/reszeitAdmin.api.ts",
      schemas: "./apps/oai/reszeitAdmin/models",
      baseUrl: `/${API_VERSION}`,
      // client: "react-query",
      // mock: true,
      mode: "tags",
      override: {
        mutator: {
          path: "./apps/oai/fetcher.ts",
          name: "fetcherInstance",
        },
        operationName: (op, route, verb) => {
          const id = op.operationId
            .replace("reservations_api", verb)
            .split("_")
            .map((s, i) => (i === 0 ? s : s[0].toUpperCase() + s.slice(1)))
            .join("");
          console.log(route);
          return id;
        },
        // title: title => "xxx" + title,
        header: info => [
          `Generated by orval üç∫ ${new Date().toLocaleDateString()}`,
          ...(info.title ? [info.title] : []),
          ...(info.description ? [info.description] : []),
          ...(info.version ? [`OpenAPI spec version: ${info.version}`] : []),
        ],
      },
    },
  },
});
